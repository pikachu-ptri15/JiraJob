This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repomix on: 2024-12-06T02:36:59.537Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Repository structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

For more information about Repomix, visit: https://github.com/yamadashy/repomix

================================================================
Repository Structure
================================================================
client/
  src/
    Components/
      JobBoard/
        JobDisplay.css
        JobDisplay.tsx
        Modal.tsx
        NewJob.tsx
        ProgressColumn.tsx
    Pages/
      JobBoard.tsx
      LogIn.tsx
      SignUp.tsx
      Splash.css
      Splash.tsx
      Testest.tsx
    App.tsx
    declarations.d.ts
    index.css
    index.html
    index.tsx
server/
  server.ts
.babelrc
.gitignore
package.json
tsconfig.json
webpack.config.js

================================================================
Repository Files
================================================================

================
File: client/src/Components/JobBoard/JobDisplay.css
================
.job-box {
    border: 1px solid #ccc;
    border-radius: 8px;
    padding: 16px;
    margin: 12px 0;
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    background-color: #f9f9f9;
  }
  
  .company-name {
    font-size: 1.5em;
    font-weight: bold;
    margin-bottom: 8px;
    color: #333;
  }
  
  .job-title {
    font-size: 1.2em;
    margin-bottom: 4px;
    color: #555;
  }
  
  .location {
    font-size: 1em;
    color: #777;
  }

================
File: client/src/Components/JobBoard/JobDisplay.tsx
================
import React from 'react'

//type or interface?
interface JobDisplayProps {
    jobTitle: string;
    companyName: string;
    location: string;
    notes: string;
  }

  const JobDisplay: React.FC<JobDisplayProps> = ({ jobTitle, companyName, location, notes }) => {
    return (
      <div className="job-box">
        <p className="company-name">{companyName}</p>
        <p className="job-title">{jobTitle}</p>
        <p className="location">{location}</p>
        <p className="notes">{notes}</p>
      </div>
    );
  };
  
  export default JobDisplay;

================
File: client/src/Components/JobBoard/Modal.tsx
================
import React, {useState} from "react";
import NewJob from "./NewJob";

interface ModalProps {
  isVisible: boolean;
  onClose: () => void;
  addJob: (newJob: { jobTitle: string; companyName: string; location: string, notes: string }) => void;
}

const Modal: React.FC<ModalProps> = ({ isVisible, onClose, addJob }) => {
  if (!isVisible) return null;

  return (
    <div style={styles.modalOverlay}>
      <div style={styles.modal}>
        <NewJob addJob={addJob} onClose={onClose}/>
        <button style={styles.closeButton} onClick={onClose}>
          Close
        </button>
      </div>
    </div>
  );
};

const styles: { [key: string]: React.CSSProperties } = {
  modalOverlay: {
    position: "fixed",
    top: 0,
    left: 0,
    right: 0,
    bottom: 0,
    backgroundColor: "rgba(0, 0, 0, 0.5)", // Semi-transparent background
    display: "flex",
    justifyContent: "center",
    alignItems: "center",
  },
  modal: {
    backgroundColor: "white",
    padding: "20px",
    borderRadius: "8px",
    width: "300px",
    textAlign: "center",
  },
  closeButton: {
    backgroundColor: "#ff3b3b",
    color: "white",
    border: "none",
    padding: "8px 16px",
    borderRadius: "4px",
    cursor: "pointer",
  },
};

export default Modal;

================
File: client/src/Components/JobBoard/NewJob.tsx
================
import React, {useState} from "react";

type NewJobProps = {
    addJob: (newJob: { jobTitle: string; companyName: string; location: string, notes: string }) => void;
    onClose: () => void;
};

const NewJob: React.FC<NewJobProps> = ({addJob, onClose}) => {
    const [formData, setFormData] = useState({
        companyName: "",
        jobTitle: "",
        location: "",
        notes: "",
    });

    const handleInputChange = ( e: React.ChangeEvent<HTMLInputElement>) => {
        const {id, value } = e.target;
        setFormData({...formData, [id]: value});
    };
    //TODO add mutiple choice field for location(remote, hybrid, on-site)
    // const handleLocationChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    //     setFormData({ ...formData, location: e.target.value });
    //   };

    //should all fields be required?
    const handleAddJob = () => {
        if (formData.jobTitle && formData.companyName && formData.location && formData.notes) {
          addJob(formData); 
          setFormData({ jobTitle: '', companyName: '', location: '', notes: '' });
          onClose();
        } else {
          alert('Please fill out all fields.');
        }
      };

    return (
        <div>
            <div>
                <label htmlFor="companyName">Company Name:</label>
                <input
                    id="companyName"
                    type="text"
                    value={formData.companyName}
                    onChange={handleInputChange}
                    placeholder="Enter the company name"
                />
            </div>
            <div>
            <label htmlFor="jobTitle">Job Title:</label>
            <input
                id="jobTitle"
                type="text"
                value={formData.jobTitle}
                onChange={handleInputChange}
                placeholder="Enter job title"
            />
            </div>
            <div>
                <label htmlFor="location">Location:</label>
                <input
                    id="location"
                    type="text"
                    value={formData.location}
                    onChange={handleInputChange}
                    placeholder="Enter location"
                />
            </div>
            <div>
            <label htmlFor="notes">Notes:</label>
            <input
                id="notes"
                type="text"
                value={formData.notes}
                onChange={handleInputChange}
                placeholder="Notes"
            />
            </div>
            <div>
                <button onClick={handleAddJob}>Add Job</button>
            </div>
        </div>
    );
};

export default NewJob;

================
File: client/src/Components/JobBoard/ProgressColumn.tsx
================
import React, { FC, ReactNode } from "react";

interface ColumnProps {
  children?: ReactNode; // Mark `children` as optional
}

const Column: FC<ColumnProps> = ({ children }) => {
  return <div style={styles.column}>{children}</div>;
};

const styles: { [key: string]: React.CSSProperties } = {
  column: {
    flex: "1 1 calc((100% - 20px) / 3)",
    backgroundColor: "#d3d3d3",
    padding: "10px",
    borderRadius: "4px",
  },
};

export default Column;

================
File: client/src/Pages/JobBoard.tsx
================
import React, { useState } from "react";
import Column from "../Components/JobBoard/ProgressColumn";
import Modal from "../Components/JobBoard/Modal";
import NewJob from "../Components/JobBoard/NewJob";
import JobDisplay from "../Components/JobBoard/JobDisplay";
import '../Components/JobBoard/JobDisplay.css';


const JobBoard: React.FC = () => {
    const [isModalVisible, setIsModalVisible] = useState(false);

    const showModal = () => setIsModalVisible(true);
    const hideModal = () => setIsModalVisible(false);

    const [jobs, setJobs] = useState<{ jobTitle: string; companyName: string; location: string, notes: string }[]>([]);

    const addJob = (newJob: { jobTitle: string; companyName: string; location: string, notes: string}) => {
        setJobs([...jobs, newJob]);
    };

    return (
        <div style={styles.container}>
      {/* Top White Space (20% of screen height) */}
      <div style={styles.topSpace}></div>

      {/* Button to open the Modal, aligned to the left with 2% space */}
      <div style={styles.buttonContainer}>
        <button style={styles.modalButton} onClick={showModal}>
          Open Modal
        </button>
      </div>

      {/* Modal */}
      <Modal isVisible={isModalVisible} onClose={hideModal} addJob={addJob}/>

      {/* Columns container (fills remaining space) */}
      <div style={styles.columnsContainer}>
        <Column>
            <h1>Applied</h1>
            <div className="job-list">
                {jobs.map((job, index) => (
                    <JobDisplay 
                    key={index}
                    companyName={job.companyName}
                    jobTitle={job.jobTitle}
                    location={job.location}
                    notes={job.notes}
                    />
                ))}
            </div>
        </Column>

        {/* Empty Column */}
        <Column>
            <h1>Interviewing</h1>
        </Column>

        <Column>
            <h1>Outcome</h1>
        </Column>
      </div>

      {/* Bottom White Space (5% of screen height) */}
      <div style={styles.bottomSpace}></div>
    </div>
  );
};

const styles: { [key: string]: React.CSSProperties } = {
  container: {
    display: "flex", // Flexbox layout to stack items vertically
    flexDirection: "column", // Stack items in a column
    height: "100vh", // Full screen height
    margin: "0", // Remove margin
  },
  topSpace: {
    height: "20%", // Top white space takes up 20% of the screen height
    backgroundColor: "white", // Make it white
  },
  buttonContainer: {
    position: "absolute",
    top: "12%", // Adjust this to be higher if needed
    left: "2%", // 2% white space from the left edge of the screen
    },
  modalButton: {
    padding: "10px 20px",
    fontSize: "16px",
    cursor: "pointer",
    backgroundColor: "#4CAF50",
    color: "white",
    border: "none",
    borderRadius: "5px",
  },
  columnsContainer: {
    display: "flex", // Flexbox layout to arrange columns horizontally
    justifyContent: "space-between", // Space columns evenly
    alignItems: "stretch", // Ensure columns stretch to the same height
    width: "96%", // Columns container takes up 96% of the screen width
    margin: "0 auto", // Center the columns container horizontally
    flex: "1", // Take up the remaining space (after the top and bottom white spaces)
    gap: "10px", // Space between columns
  },
  bottomSpace: {
    height: "5%", // Bottom white space takes up 5% of the screen height
    backgroundColor: "white", // Make it white
  },
  item: {
    padding: "10px", // Padding for items inside the columns
    backgroundColor: "#e0e0e0", // Background color for items
    borderRadius: "4px", // Border radius for item styling
    textAlign: "center", // Center the text inside items
    marginBottom: "10px", // Adds 10px space between items inside each column
  },
};


export default JobBoard;

================
File: client/src/Pages/LogIn.tsx
================
// import React, { useState } from 'react';
// type Props = {};

// const LogIn: React.FC = (props: Props) => {
//   const handleSubmit = (event: any) => {
//     event.preventDefault();
//     console.log('clicked me');
//   }

//   const [username, setUsername] = useState('');
//   const [password, setPassword] = useState('');

//   // const supabase = useSupabaseClient();

//   const handleInputChange = (event: any) => {
//     const { name, value } = event.target;
//     if (name === 'username') setUsername(value);
//     if (name === 'password') setPassword(value);
//   };

//   return (
//     <div className='loginWrapper'>
//       <div className='loginCenter'>
//         <div className='loginHeader'>JiraJob</div>
//         <div className='loginCenterInfo'>
//           <div className='loginCenterLoginHeader'>Login</div>
//           <form onSubmit={handleSubmit}>
//             <div>
//               <input
//                 type='text'
//                 name='username'
//                 placeholder='Username'
//                 value={username}
//                 onChange={handleInputChange}
//                 required
//                 style={{ borderRadius: '4px' }}
//                 className='field'
//               />
//             </div>
//             <div>
//               <input
//                 type='password'
//                 name='password'
//                 placeholder='Password'
//                 value={password}
//                 onChange={handleInputChange}
//                 required
//                 style={{ borderRadius: '4px' }}
//                 className='field'
//               />
//             </div>
//             <div className='field'>
//               <button type='submit' className='login-btn'>
//                 Login
//               </button>
//             </div>
//           </form>
//         </div>
//         <div className='loginNewUser'>
//           <a href='/signup'>New User?</a>
//         </div>
//       </div>
//     </div>
//   );
// };

// export default LogIn;


import React, { useState } from 'react';
import { useNavigate } from 'react-router-dom';

const LogIn: React.FC = () => {
  const [username, setUsername] = useState('');
  const [password, setPassword] = useState('');
  const [errorMessage, setErrorMessage] = useState('');
  const navigate = useNavigate();

  const handleInputChange = (event: React.ChangeEvent<HTMLInputElement>) => {
    const { name, value } = event.target;
    if (name === 'username') setUsername(value);
    if (name === 'password') setPassword(value);
  };

  const handleSubmit = async (event: React.FormEvent) => {
    event.preventDefault();

    setErrorMessage(''); 

    try {

      const response = await fetch('http://localhost:3001/login', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ username, password }),
      });

      const data = await response.json();

      if (response.ok) {
        console.log('Login successful:', data.message);
        navigate('/board');
      } else {
        setErrorMessage(data.error || 'Failed to log in');
      }
    } catch (error) {
      console.error('Login error:', error);
      setErrorMessage('An unexpected error occurred. Please try again.');
    }
  };

  return (
    <div className="loginWrapper">
      <div className="loginCenter">
        <div className="loginHeader">JiraJob</div>
        <div className="loginCenterInfo">
          <div className="loginCenterLoginHeader">Login</div>
          <form onSubmit={handleSubmit}>
            <div>
              <input
                type="text"
                name="username"
                placeholder="Username"
                value={username}
                onChange={handleInputChange}
                required
                style={{ borderRadius: '4px' }}
                className="field"
              />
            </div>
            <div>
              <input
                type="password"
                name="password"
                placeholder="Password"
                value={password}
                onChange={handleInputChange}
                required
                style={{ borderRadius: '4px' }}
                className="field"
              />
            </div>
            <div className="field">
              <button type="submit" className="login-btn">
                Login
              </button>
            </div>
          </form>
          {errorMessage && <div style={{ color: 'red' }}>{errorMessage}</div>}
        </div>
        <div className="loginNewUser">
          <a href="/signup">New User?</a>
        </div>
      </div>
    </div>
  );
};

export default LogIn;

================
File: client/src/Pages/SignUp.tsx
================
// import React, { useState } from 'react';
// type Props = {};

// const SignUp: React.FC = (props: Props) => {
//   const handleSubmit = (event: any) => {
//     event.preventDefault();
//     console.log('clicked me');
//   }

//   const [username, setUsername] = useState('');
//   const [email, setEmail] = useState('');
//   const [password, setPassword] = useState('');
//   const [passwordCheck, setPasswordCheck] = useState('');

//   // const supabase = useSupabaseClient();

//   // Insert 1:
//   const [errorMessage, setErrorMessage] = useState('');
//   const [successMessage, setSuccessMessage] = useState('');

//   const handleInputChange = (event: any) => {
//     const { name, value } = event.target;
//     if (name === 'username') setUsername(value);
//     if (name === 'password') setPassword(value);
//     if (name === 'email') setPassword(value);
//     if (name === 'passwordCheck') setPasswordCheck(value);
//   };


//   return (
//     <div className='loginWrapper'>
//       <div className='loginCenter loginMoreOffset'>
//         <div className='loginHeader'>Welcome to JiraJob</div>
//         <div className='loginCenterInfo'>
//           <div className='loginCenterLoginHeader'>Sign Up</div>
//           <form onSubmit={handleSubmit}>
//             <div>
//               <input
//                 type='text'
//                 name='username'
//                 placeholder='Username'
//                 value={username}
//                 onChange={handleInputChange}
//                 required
//                 style={{ borderRadius: '4px' }}
//                 className='field'
//               />
//             </div>
//             <div>
//               <input
//                 type='text'
//                 name='email'
//                 placeholder='Email'
//                 value={email}
//                 onChange={handleInputChange}
//                 required
//                 style={{ borderRadius: '4px' }}
//                 className='field'
//               />
//             </div>
//             <div>
//               <input
//                 type='password'
//                 name='password'
//                 placeholder='Password'
//                 value={password}
//                 onChange={handleInputChange}
//                 required
//                 style={{ borderRadius: '4px' }}
//                 className='field'
//               />
//             </div>
//             <div>
//               <input
//                 type='password'
//                 name='passwordCheck'
//                 placeholder='Retype Password'
//                 value={passwordCheck}
//                 onChange={handleInputChange}
//                 required
//                 style={{ borderRadius: '4px' }}
//                 className='field'
//               />
//             </div>
//             <div className='field'>
//               <button type='submit' className='login-btn'>
//                 Sign Up
//               </button>
//             </div>
//           </form>
//         </div>
//         <div className='loginNewUser'>
//           <a href='/'>Sign In</a>
//         </div>
//       </div>
//     </div>
//   );
// };

// export default SignUp;



import React, { useState } from 'react';
import { useNavigate } from 'react-router';

type Props = {};

const SignUp: React.FC = (props: Props) => {

  const [username, setUsername] = useState('');
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [passwordCheck, setPasswordCheck] = useState('');


  const [errorMessage, setErrorMessage] = useState('');
  const [successMessage, setSuccessMessage] = useState('');

  const navigate = useNavigate();

  const handleInputChange = (event: React.ChangeEvent<HTMLInputElement>) => {
    const { name, value } = event.target;
    if (name === 'username') setUsername(value);
    if (name === 'email') setEmail(value);
    if (name === 'password') setPassword(value);
    if (name === 'passwordCheck') setPasswordCheck(value);
  };

  const handleSubmit = async (event: React.FormEvent) => {
    event.preventDefault();

    
    setErrorMessage('');
    setSuccessMessage('');


    if (password !== passwordCheck) {
      setErrorMessage('Passwords do not match');
      return;
    }

    try {

      const response = await fetch('http://localhost:3001/register', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          username,
          email,
          password,
        }),
      });

      const data = await response.json();

      if (response.ok) {
        setSuccessMessage(data.message);
        setUsername('');
        setEmail('');
        setPassword('');
        setPasswordCheck('');
        navigate('/login')
      } else {
        setErrorMessage(data.error || 'Failed to register');
      }
    } catch (error) {
      console.error('Error registering user:', error);
      setErrorMessage('An unexpected error occurred. Please try again.');
    }
  };

  return (
    <div className='loginWrapper'>
      <div className='loginCenter loginMoreOffset'>
        <div className='loginHeader'>Welcome to JiraJob</div>
        <div className='loginCenterInfo'>
          <div className='loginCenterLoginHeader'>Sign Up</div>
          <form onSubmit={handleSubmit}>
            <div>
              <input
                type='text'
                name='username'
                placeholder='Username'
                value={username}
                onChange={handleInputChange}
                required
                style={{ borderRadius: '4px' }}
                className='field'
              />
            </div>
            <div>
              <input
                type='text'
                name='email'
                placeholder='Email'
                value={email}
                onChange={handleInputChange}
                required
                style={{ borderRadius: '4px' }}
                className='field'
              />
            </div>
            <div>
              <input
                type='password'
                name='password'
                placeholder='Password'
                value={password}
                onChange={handleInputChange}
                required
                style={{ borderRadius: '4px' }}
                className='field'
              />
            </div>
            <div>
              <input
                type='password'
                name='passwordCheck'
                placeholder='Retype Password'
                value={passwordCheck}
                onChange={handleInputChange}
                required
                style={{ borderRadius: '4px' }}
                className='field'
              />
            </div>
            <div className='field'>
              <button type='submit' className='login-btn'>
                Sign Up
              </button>
            </div>
          </form>
          {errorMessage && <div style={{ color: 'red' }}>{errorMessage}</div>}
          {successMessage && <div style={{ color: 'green' }}>{successMessage}</div>}
        </div>
        <div className='loginNewUser'>
          <a href='/login'>Sign In</a>
        </div>
      </div>
    </div>
  );
};

export default SignUp;

================
File: client/src/Pages/Splash.css
================
.app {
    background-color: black;
    height: 100vh;
    position: relative;
}

.img {
    background-size: cover;
    height: 80vh;
}

.button-container-12 {
    margin-top: -70px;
}

.button-12 {
    padding: 10px 20px;
    margin: 5px;
    cursor: pointer;
    font-size: large;
    border-radius: 10px;
    border: 1px solid white;
    /* background: rgb(76, 44, 163); */
    /* background: linear-gradient(270deg, rgb(76, 44, 163), rgb(128, 128, 128)); */
    background: linear-gradient(270deg, rgb(76, 44, 163), rgb(139, 69, 255), rgb(76, 44, 163));
    background-size: 300% 300%;
    color: white;

    box-shadow: 0 0 10px rgba(76, 44, 163, 0.6),
    0 0 20px rgba(76, 44, 163, 0.4),
    0 0 30px rgba(76, 44, 163, 0.2),
    0 0 40px rgba(76, 44, 163, 0.4);

    transition: transform 0.3s ease, box-shadow 0.3s ease;
    animation: gradientMove 3s infinite, bounceWithPause 3.5s infinite;
}

button:hover {
    transform: scale(1.1);
    background-color: hsl(256, 57%, 61%);

    /* box-shadow: 0 0 15px rgba(76, 44, 163, 0.8),
              0 0 25px rgba(76, 44, 163, 0.6),
              0 0 35px rgba(76, 44, 163, 0.4),
              0 0 50px rgba(76, 44, 163, 0.3); */
    box-shadow: 0 0 30px rgba(76, 44, 163, 1),
              0 0 40px rgba(139, 69, 255, 0.8),
              0 0 60px rgba(76, 44, 163, 0.6),
              0 0 80px rgba(139, 69, 255, 0.4);
    animation: gradientMove 3s infinite;
}

@keyframes gradientMove {
    0% {
      background-position: 0% 50%;
    }
    50% {
      background-position: 100% 50%;
    }
    100% {
      background-position: 0% 50%;
    }
}

@keyframes bounceWithPause {
    0%, 20% {
      transform: translateY(0);
    }
    25% {
      transform: translateY(-12px);
    }
    30% {
      transform: translateY(0);
    }
    35% {
      transform: translateY(-10px);
    }
    40% {
      transform: translateY(0);
    }
    100% {
      transform: translateY(0);
    }
  }

================
File: client/src/Pages/Splash.tsx
================
import React, { useState } from 'react';
import { useNavigate } from 'react-router-dom';
import JiraJobLogo from '../assets/JiraJob_logo.png';
import './Splash.css'


type Props = {};
const Splash: React.FC = (props: Props) => {

  const navigate = useNavigate();

  const handleClick = () => navigate('/login')

  return (
    <div className='app'>
      <img src={JiraJobLogo} alt="JiraJobLogo" className='img'/>
      <div className='button-container-12'>
      <button className='button-12' onClick={handleClick}>Get Started</button>
      </div>
    </div>
  )
}

export default Splash

================
File: client/src/Pages/Testest.tsx
================
import React from 'react';
type Props = {};

const Testest: React.FC = (props: Props) => {
  return <><div>This is testest page</div></>;
};

export default Testest;

================
File: client/src/App.tsx
================
import React from 'react';
import { BrowserRouter as Router, Route, Routes } from 'react-router-dom';
import LogIn from './Pages/LogIn';
import SignUp from './Pages/SignUp';
import JobBoard from './Pages/JobBoard';
import Splash from './Pages/Splash';

const App: React.FC = () => {
  return (
    <Router>
        <Routes>
          <Route path='/' element={<Splash />} />
          <Route path='/login' element={<LogIn />} />
          <Route path='/signup' element={<SignUp />} />
          <Route path='/board' element={<JobBoard />} />
        </Routes>
    </Router>
  );
};

export default App;

================
File: client/src/declarations.d.ts
================
declare module '*.png' {
    const value: string;
    export default value;
  }

  declare module '*.jpg' {
    const value: string;
    export default value;
  }

  declare module '*.jpeg' {
    const value: string;
    export default value;
  }

  declare module '*.gif' {
    const value: string;
    export default value;
  }

  declare module '*.svg' {
    const value: string;
    export default value;
  }

================
File: client/src/index.css
================
body {
  font-family: Arial, Helvetica, sans-serif;
  margin: 0;
  padding: 0;
  text-align: center;
}

.loginWrapper {
  background-color: rgb(255, 255, 255);
  position: absolute;
  width: 100%;
  height: 100%;
  display: grid;
}

.loginCenter {
  width: 340px;
  height: fit-content;
  justify-self: center;
  align-self: center;
  display: grid;
  grid-template-columns: 1fr;
  grid-template-rows: min-content 1fr min-content;
  position: relative;
  bottom: 35px;
}

.loginMoreOffset {
  bottom: 40px;
}

.loginCenterInfo {
  width: 100%;
  height: fit-content;
  background-color: #4CAF50;
  justify-self: center;
  align-self: center;
}

.loginHeader {
  font-size: 40px;
  grid-row: 1;
  grid-column: 1;
  margin-bottom: 20px
}

.loginCenterInfo {
  grid-row: 2;
  grid-column: 1;
  border-radius: 20px;
}

.loginNewUser {
  margin-top: 10px;
  grid-row: 3;
  grid-column: 1;
  justify-self: right;
}

.field {
  width: 80%;
  margin-bottom: 10px;
  height: 22px;
  font-size: 18px;
  justify-self: center;
}

.loginCenterLoginHeader {
  font-size: 24px;
  margin-top: 10px;
  margin-bottom: 10px;
}

================
File: client/src/index.html
================
<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Webpack React TS</title>
  </head>
  <body>
    <div id="root"></div>
  </body>
</html>

================
File: client/src/index.tsx
================
import React from 'react';
import ReactDOM from 'react-dom/client';
import './index.css';
import App from './App';

ReactDOM.createRoot(document.getElementById('root') as HTMLElement).render(
  <React.StrictMode>
    <App/>
  </React.StrictMode>
);

================
File: server/server.ts
================
import express, { Request, Response, NextFunction } from 'express';
import path from 'path';
import cors from 'cors';
import cookieParser from 'cookie-parser';
import dotenv from 'dotenv';
import pkg, { Pool } from 'pg';
import bcrypt from 'bcrypt';

dotenv.config();

const app = express();

app.use(cors());
app.use(cookieParser());
app.use(express.json({ limit: '10mb' }));
app.use(express.urlencoded({ extended: true }));
app.use(express.static(path.join(__dirname, '/dist')));

// Initialize Pool
const pool = new Pool({
  connectionString: process.env.DATABASE_URL,
  ssl: {
    rejectUnauthorized: false,
  },
});

app.post('/register', async (req, res) => {
  try {
    const { username, email, password } = req.body;

    const hashedPassword = await bcrypt.hash(password, 12);
    const result = await pool.query(
      'INSERT INTO users (username, email, password) VALUES ($1, $2, $3)',
      [username, email, hashedPassword]
    );
    res.status(201).json({ message: 'User registered successfully!' });
  } catch (error) {
    res.status(500).json({ error: 'Internal server error' });
  }
});

app.post('/login', async (req: Request, res: Response): Promise<void> => {
  try {
    const { username, password } = req.body;

    const user = await pool.query('SELECT * FROM users WHERE username = $1', [
      username,
    ]);
    if (!user.rows.length) {
      res.status(400).json({ error: 'Invalid username or password' });
      return;
    }

    const isMatch = await bcrypt.compare(password, user.rows[0].password);
    if (!isMatch) {
      res.status(400).json({ error: 'Invalid username or password' });
      return;
    }
    res.status(200).json({ message: 'Login successful!' });
  } catch (error) {
    console.error('Login error:', (error as any).message);
    res.status(500).json({ error: 'Internal server error' });
  }
});

// Serve your built React application
app.get('*', (req: Request, res: Response) => {
  res.sendFile(path.resolve(__dirname, '../dist/index.html'));
});

// Unknown route error handler
app.use('*', (req: Request, res: Response) =>
  res.status(404).send('Page not found')
);

// Global error handler
app.use((err: any, req: Request, res: Response, next: NextFunction) => {
  const defaultErr = {
    log: 'Express error handler caught unknown middleware error',
    status: 500,
    message: { err: 'An error occurred' },
  };
  const errorObj = Object.assign({}, defaultErr, err);
  console.log(errorObj.log);
  return res.status(errorObj.status).json(errorObj.message);
});

const PORT = process.env.PORT || 3001;
app.listen(PORT, () => console.log(`Server running on port: ${PORT}`));

export default app;

================
File: .babelrc
================
{
    "presets": [
      "@babel/preset-env",
      "@babel/preset-react",
      "@babel/preset-typescript"
    ]
  }

================
File: .gitignore
================
# Dependencies
node_modules

# Environment variables
.env

================
File: package.json
================
{
  "name": "testjirajob",
  "version": "1.0.0",
  "main": "index.js",
  "scripts": {
    "start": "webpack serve --open",
    "build": "webpack --mode production",
    "dev": "concurrently \"npm run start\" \"nodemon server/server.ts\"",
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "keywords": [],
  "author": "",
  "license": "ISC",
  "description": "",
  "dependencies": {
    "@types/bcrypt": "^5.0.2",
    "@types/pg": "^8.11.10",
    "@types/react-router": "^5.1.20",
    "@types/react-router-dom": "^5.3.3",
    "axios": "^1.7.8",
    "bcrypt": "^5.1.1",
    "concurrently": "^9.1.0",
    "cookie-parser": "^1.4.7",
    "cors": "^2.8.5",
    "dotenv": "^16.4.5",
    "pg": "^8.13.1",
    "react": "^18.3.1",
    "react-dom": "^18.3.1",
    "react-router-dom": "^7.0.1"
  },
  "devDependencies": {
    "@babel/core": "^7.26.0",
    "@babel/preset-env": "^7.26.0",
    "@babel/preset-react": "^7.25.9",
    "@babel/preset-typescript": "^7.26.0",
    "@types/cookie-parser": "^1.4.8",
    "@types/cors": "^2.8.17",
    "@types/react": "^18.3.12",
    "@types/react-dom": "^18.3.1",
    "babel-loader": "^9.2.1",
    "css-loader": "^7.1.2",
    "html-webpack-plugin": "^5.6.3",
    "nodemon": "^3.1.7",
    "style-loader": "^4.0.0",
    "ts-node": "^10.9.2",
    "typescript": "^5.7.2",
    "webpack": "^5.96.1",
    "webpack-cli": "^5.1.4",
    "webpack-dev-server": "^5.1.0"
  }
}

================
File: tsconfig.json
================
// {
//     "compilerOptions": {
//       "target": "es5",
//       "allowJs": true,
//       "jsx": "react",
//       "moduleResolution": "node",
//       "outDir": "./dist",
//       "strict": true,
//       "esModuleInterop": true
//     },
//     "include": ["client/src/**/*"]
//   }


{
  "compilerOptions": {
    "target": "es5",
    "allowJs": true,
    "jsx": "react",
    "moduleResolution": "node",
    "outDir": "./dist",
    "strict": true,
    "esModuleInterop": true
  },
  "include": [
    "client/src/**/*",
    "client/src/declarations.d.ts"  
  ]
}

================
File: webpack.config.js
================
// const path = require('path');
// const HtmlWebpackPlugin = require('html-webpack-plugin');

// module.exports = {
//   entry: './client/src/index.tsx',
//   mode: 'development',
//   output: {
//     filename: 'bundle.js',
//     path: path.resolve(__dirname, 'dist')
//   },
//   module: {
//     rules: [
//       {
//         test: /\.css$/,
//         use: ['style-loader', 'css-loader'],
//       },
//       {
//         test: /\.(ts|tsx)$/,
//         exclude: /node_modules/,
//         use: 'babel-loader'
//       }
//     ]
//   },
//   plugins: [
//     new HtmlWebpackPlugin({
//       template: './client/src/index.html'
//     })
//   ],
//   resolve: {
//     extensions: ['.tsx', '.ts', '.js']
//   },
//   devServer: {
//     static: {
//       directory: path.resolve(__dirname, 'dist'),
//       publicPath: '/',
//     },
//     port: 8080,
//     hot: true,
//     open: true,
//     proxy: [
//       {
//         context: ['/**'],
//         target: 'http://localhost:3001',
//         secure: false,
//       },
//     ],
//   },
// };



const path = require('path');
const HtmlWebpackPlugin = require('html-webpack-plugin');

module.exports = {
  entry: './client/src/index.tsx',
  mode: 'development',
  output: {
    filename: 'bundle.js',
    path: path.resolve(__dirname, 'dist'),
    clean: true, // Cleans the dist folder before each build
  },
  module: {
    rules: [
      {
        test: /\.css$/,
        use: ['style-loader', 'css-loader'],
      },
      {
        test: /\.(ts|tsx)$/,
        exclude: /node_modules/,
        use: 'babel-loader',
      },
      {
        test: /\.(png|jpe?g|gif|svg)$/i, // Matches image files
        type: 'asset/resource', // Copies images to the output folder
      },
    ],
  },
  plugins: [
    new HtmlWebpackPlugin({
      template: './client/src/index.html',
    }),
  ],
  resolve: {
    extensions: ['.tsx', '.ts', '.js'],
  },
  devServer: {
    static: {
      directory: path.resolve(__dirname, 'dist'), // Serves the dist folder
      publicPath: '/', // Root path for serving static files
    },
    port: 8080,
    hot: true,
    open: true,
    proxy: [
      {
        context: ['/api', '/login', '/register', '/signup', '/board'], // Proxy API calls to backend
        target: 'http://localhost:3001',
        secure: false,
      },
    ],
  },
};
